[
  {
    "id": "python-django",
    "name": "Python and Django Best Practices",
    "description": "Guidelines for writing idiomatic, efficient, and maintainable Python code within the Django framework.",
    "documentation": "python-django.md",
    "tags": ["python", "django", "backend", "web"],
    "severity": "high",
    "applies_to": ["python", "django", "backend"],
    "automation_potential": ["linter", "static-analysis", "code-review"],
    "suggested_tools": ["Flake8", "Pylint", "Django check", "pytest-django"],
    "related_rules": ["javascript-typescript", "go", "fastapi", "general-principles"]
  },
  {
    "id": "javascript-typescript",
    "name": "JavaScript/TypeScript Best Practices",
    "description": "Guidelines for writing robust, type-safe, and maintainable JavaScript and TypeScript code.",
    "documentation": "javascript-typescript.md",
    "tags": ["javascript", "typescript", "frontend", "backend"],
    "severity": "high",
    "applies_to": ["javascript", "typescript", "frontend", "backend"],
    "automation_potential": ["linter", "type-checker", "static-analysis", "code-review"],
    "suggested_tools": ["ESLint", "Prettier", "TypeScript compiler"],
    "related_rules": ["python-django", "go", "fastapi", "general-principles"]
  },
  {
    "id": "go-best-practices",
    "name": "Go Best Practices",
    "description": "Guidelines for writing idiomatic, concurrent, and robust applications in Go.",
    "documentation": "go/go-best-practices.md",
    "tags": ["go", "backend", "concurrency"],
    "severity": "high",
    "applies_to": ["go", "backend"],
    "automation_potential": ["go-vet", "golint", "staticcheck", "code-review"],
    "suggested_tools": ["go vet", "golint", "staticcheck"],
    "related_rules": ["go-effective-programming", "go-microservices"]
  },
  {
    "id": "go-effective-programming",
    "name": "Go Effective Programming",
    "description": "Guidelines for writing idiomatic and effective Go programs.",
    "documentation": "go/go-effective-programming.md",
    "tags": ["go", "best-practices", "idiomatic"],
    "severity": "high",
    "applies_to": ["backend", "microservices"],
    "automation_potential": ["go-vet", "golint", "code-review"],
    "suggested_tools": ["Go Vet", "Golint"],
    "related_rules": ["go-best-practices"]
  },
  {
    "id": "go-microservices",
    "name": "Go Microservices Best Practices",
    "description": "Guidelines for building robust and scalable microservices with Go.",
    "documentation": "go/go-microservices.md",
    "tags": ["go", "microservices", "architecture"],
    "severity": "high",
    "applies_to": ["backend", "microservices"],
    "automation_potential": ["code-review"],
    "suggested_tools": ["Go Micro", "gRPC"],
    "related_rules": ["go-best-practices", "microservices-best-practices"]
  },
  {
    "id": "react-specific",
    "name": "React Specific Best Practices",
    "description": "Guidelines for optimizing React component performance, organization, and reusability.",
    "documentation": "react-specific.md",
    "tags": ["react", "frontend", "performance"],
    "severity": "high",
    "applies_to": ["react", "frontend"],
    "automation_potential": ["linter", "static-analysis", "code-review"],
    "suggested_tools": ["ESLint-plugin-react", "React DevTools Profiler"],
    "related_rules": ["react", "general-frontend-best-practices"]
  },
  {
    "id": "fastapi",
    "name": "FastAPI Best Practices",
    "description": "Guidelines for building reliable, testable, and high-performance APIs with FastAPI.",
    "documentation": "fastapi.md",
    "tags": ["fastapi", "python", "backend", "api"],
    "severity": "high",
    "applies_to": ["fastapi", "python", "backend", "api"],
    "automation_potential": ["linter", "static-analysis", "code-review", "api-testing"],
    "suggested_tools": ["Pydantic", "FastAPI CLI", "pytest"],
    "related_rules": ["python-django", "api-design", "general-principles"]
  },
  {
    "id": "general-principles",
    "name": "General Language and Framework Principles",
    "description": "Overarching best practices applicable across various programming languages and frameworks.",
    "documentation": "general-principles.md",
    "tags": ["best-practices", "general", "coding-standards"],
    "severity": "medium",
    "applies_to": ["all"],
    "automation_potential": ["code-review"],
    "suggested_tools": [],
    "related_rules": ["python-django", "javascript-typescript", "go", "react-specific", "fastapi"]
  },
  {
    "id": "lua-best-practices",
    "name": "Lua Best Practices",
    "description": "Guidelines for writing idiomatic, efficient, and maintainable Lua code.",
    "documentation": "lua/lua-best-practices.md",
    "tags": ["lua", "best-practices", "language"],
    "severity": "high",
    "applies_to": ["embedded-systems", "game-development", "scripting"],
    "automation_potential": ["lua-linter", "code-review"],
    "suggested_tools": ["Lua Linter"],
    "related_rules": ["lua-performance-optimization", "lua-scripting-guidelines"]
  },
  {
    "id": "lua-performance-optimization",
    "name": "Lua Performance Optimization",
    "description": "Techniques for optimizing Lua code for speed and efficiency.",
    "documentation": "lua/lua-performance-optimization.md",
    "tags": ["lua", "performance", "optimization"],
    "severity": "high",
    "applies_to": ["embedded-systems", "game-development", "scripting"],
    "automation_potential": ["profiler", "code-review"],
    "suggested_tools": ["Lua Profiler"],
    "related_rules": ["lua-best-practices"]
  },
  {
    "id": "lua-scripting-guidelines",
    "name": "Lua Scripting Guidelines",
    "description": "Best practices for integrating Lua as a scripting language in host applications.",
    "documentation": "lua/lua-scripting-guidelines.md",
    "tags": ["lua", "scripting", "integration"],
    "severity": "medium",
    "applies_to": ["embedded-systems", "game-development", "host-applications"],
    "automation_potential": ["code-review"],
    "suggested_tools": [],
    "related_rules": ["lua-best-practices"]
  },
  {
    "id": "erlang-concurrent-programming",
    "name": "Erlang Concurrent Programming",
    "description": "Guidelines for effective concurrent programming in Erlang using Actors and message passing.",
    "documentation": "erlang/erlang-concurrent-programming.md",
    "tags": ["erlang", "concurrency", "actors"],
    "severity": "high",
    "applies_to": ["backend", "distributed-systems"],
    "automation_potential": ["code-review"],
    "suggested_tools": ["Erlang/OTP"],
    "related_rules": ["erlang-fault-tolerance", "erlang-otp-patterns"]
  },
  {
    "id": "erlang-fault-tolerance",
    "name": "Erlang Fault Tolerance",
    "description": "Strategies for building highly available and fault-tolerant systems with Erlang.",
    "documentation": "erlang/erlang-fault-tolerance.md",
    "tags": ["erlang", "fault-tolerance", "reliability"],
    "severity": "critical",
    "applies_to": ["backend", "distributed-systems"],
    "automation_potential": ["code-review"],
    "suggested_tools": ["Erlang/OTP"],
    "related_rules": ["erlang-concurrent-programming", "erlang-otp-patterns"]
  },
  {
    "id": "erlang-otp-patterns",
    "name": "Erlang OTP Patterns",
    "description": "Best practices for utilizing Erlang/OTP behaviors and design principles.",
    "documentation": "erlang/erlang-otp-patterns.md",
    "tags": ["erlang", "otp", "design-patterns"],
    "severity": "high",
    "applies_to": ["backend", "distributed-systems"],
    "automation_potential": ["code-review"],
    "suggested_tools": ["Erlang/OTP"],
    "related_rules": ["erlang-concurrent-programming", "erlang-fault-tolerance"]
  }
]