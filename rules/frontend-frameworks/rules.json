[
  {
    "id": "react",
    "name": "React Best Practices",
    "description": "Guidelines for building robust, scalable, and maintainable applications with React, focusing on component architecture, state management, and performance.",
    "documentation": "react.md",
    "tags": ["frontend", "react", "javascript", "ui"],
    "severity": "high",
    "applies_to": ["frontend", "react", "javascript", "typescript"],
    "automation_potential": ["linter", "static-analysis", "code-review"],
    "suggested_tools": ["ESLint-plugin-react", "React Testing Library", "Cypress"],
    "related_rules": ["vuejs", "angular", "nextjs", "general-frontend-best-practices"]
  },
  {
    "id": "vuejs",
    "name": "Vue.js Best Practices",
    "description": "Guidelines for developing efficient, maintainable, and scalable applications with Vue.js, covering component design, state management, and reactivity.",
    "documentation": "vuejs.md",
    "tags": ["frontend", "vuejs", "javascript", "ui"],
    "severity": "high",
    "applies_to": ["frontend", "vuejs", "javascript", "typescript"],
    "automation_potential": ["linter", "static-analysis", "code-review"],
    "suggested_tools": ["ESLint-plugin-vue", "Vue Test Utils", "Cypress"],
    "related_rules": ["react", "angular", "nuxtjs", "general-frontend-best-practices"]
  },
  {
    "id": "angular",
    "name": "Angular Best Practices",
    "description": "Guidelines for building robust, scalable, and maintainable applications with Angular, focusing on module organization, component communication, and change detection.",
    "documentation": "angular.md",
    "tags": ["frontend", "angular", "typescript", "ui"],
    "severity": "high",
    "applies_to": ["frontend", "angular", "typescript"],
    "automation_potential": ["linter", "static-analysis", "code-review"],
    "suggested_tools": ["ESLint-plugin-angular", "Angular CLI", "Cypress"],
    "related_rules": ["react", "vuejs", "general-frontend-best-practices"]
  },
  {
    "id": "svelte",
    "name": "Svelte Best Practices",
    "description": "Guidelines for building reactive and efficient web applications with Svelte, focusing on its compiler-driven approach and reactivity model.",
    "documentation": "svelte.md",
    "tags": ["frontend", "svelte", "javascript", "ui"],
    "severity": "high",
    "applies_to": ["frontend", "svelte", "javascript", "typescript"],
    "automation_potential": ["linter", "static-analysis", "code-review"],
    "suggested_tools": ["ESLint-plugin-svelte", "Svelte Testing Library", "Cypress"],
    "related_rules": ["react", "vuejs", "general-frontend-best-practices"]
  },
  {
    "id": "nextjs",
    "name": "Next.js Best Practices",
    "description": "Guidelines for building performant, SEO-friendly, and scalable React applications with Next.js, covering data fetching, routing, and deployment.",
    "documentation": "nextjs.md",
    "tags": ["frontend", "nextjs", "react", "ssr", "ssg"],
    "severity": "high",
    "applies_to": ["frontend", "nextjs", "react", "javascript", "typescript"],
    "automation_potential": ["linter", "static-analysis", "code-review", "seo-audit"],
    "suggested_tools": ["ESLint-config-next", "Next.js CLI", "Lighthouse"],
    "related_rules": ["react", "nuxtjs", "general-frontend-best-practices"]
  },
  {
    "id": "nuxtjs",
    "name": "Nuxt.js Best Practices",
    "description": "Guidelines for building performant, SEO-friendly, and scalable Vue.js applications with Nuxt.js, covering data fetching, routing, and deployment.",
    "documentation": "nuxtjs.md",
    "tags": ["frontend", "nuxtjs", "vuejs", "ssr", "ssg"],
    "severity": "high",
    "applies_to": ["frontend", "nuxtjs", "vuejs", "javascript", "typescript"],
    "automation_potential": ["linter", "static-analysis", "code-review", "seo-audit"],
    "suggested_tools": ["ESLint-plugin-vue", "Nuxt.js CLI", "Lighthouse"],
    "related_rules": ["vuejs", "nextjs", "general-frontend-best-practices"]
  },
  {
    "id": "gatsby",
    "name": "Gatsby Best Practices",
    "description": "Guidelines for building fast, secure, and scalable static sites and applications with Gatsby, focusing on data sourcing, plugins, and performance.",
    "documentation": "gatsby.md",
    "tags": ["frontend", "gatsby", "react", "ssg", "graphql"],
    "severity": "high",
    "applies_to": ["frontend", "gatsby", "react", "javascript", "typescript"],
    "automation_potential": ["linter", "static-analysis", "code-review", "seo-audit"],
    "suggested_tools": ["ESLint-plugin-react", "Gatsby CLI", "Lighthouse"],
    "related_rules": ["react", "nextjs", "general-frontend-best-practices"]
  },
  {
    "id": "solidjs",
    "name": "SolidJS Best Practices",
    "description": "Guidelines for building highly performant and reactive web applications with SolidJS, focusing on its fine-grained reactivity and compilation model.",
    "documentation": "solidjs.md",
    "tags": ["frontend", "solidjs", "javascript", "ui"],
    "severity": "high",
    "applies_to": ["frontend", "solidjs", "javascript", "typescript"],
    "automation_potential": ["linter", "static-analysis", "code-review"],
    "suggested_tools": ["ESLint", "Solid Testing Library"],
    "related_rules": ["react", "vuejs", "general-frontend-best-practices"]
  },
  {
    "id": "qwik",
    "name": "Qwik Best Practices",
    "description": "Guidelines for building instantly interactive web applications with Qwik, focusing on its resumability and fine-grained lazy loading.",
    "documentation": "qwik.md",
    "tags": ["frontend", "qwik", "javascript", "ui"],
    "severity": "high",
    "applies_to": ["frontend", "qwik", "javascript", "typescript"],
    "automation_potential": ["linter", "static-analysis", "code-review"],
    "suggested_tools": ["ESLint", "Qwik Testing Library"],
    "related_rules": ["react", "vuejs", "general-frontend-best-practices"]
  },
  {
    "id": "astro",
    "name": "Astro Best Practices",
    "description": "Guidelines for building fast, content-focused websites with Astro, leveraging its island architecture and framework-agnostic approach.",
    "documentation": "astro.md",
    "tags": ["frontend", "astro", "ssg", "mpa"],
    "severity": "high",
    "applies_to": ["frontend", "astro", "javascript", "typescript"],
    "automation_potential": ["linter", "static-analysis", "code-review", "seo-audit"],
    "suggested_tools": ["ESLint", "Lighthouse"],
    "related_rules": ["nextjs", "nuxtjs", "general-frontend-best-practices"]
  },
  {
    "id": "web-components",
    "name": "Web Components Best Practices",
    "description": "Guidelines for building reusable, encapsulated, and interoperable custom elements using Web Components standards.",
    "documentation": "web-components.md",
    "tags": ["frontend", "web-components", "html", "javascript", "custom-elements"],
    "severity": "medium",
    "applies_to": ["frontend", "web-components", "javascript"],
    "automation_potential": ["linter", "code-review"],
    "suggested_tools": ["ESLint", "Web Component Tester"],
    "related_rules": ["general-frontend-best-practices"]
  },
  {
    "id": "general-frontend-best-practices",
    "name": "General Frontend Best Practices",
    "description": "Overarching guidelines applicable across all frontend frameworks for building high-quality, performant, and maintainable web applications.",
    "documentation": "general-frontend-best-practices.md",
    "tags": ["frontend", "best-practices", "performance", "accessibility", "security"],
    "severity": "high",
    "applies_to": ["frontend", "all"],
    "automation_potential": ["linter", "static-analysis", "code-review", "seo-audit", "performance-audit"],
    "suggested_tools": ["ESLint", "Prettier", "Lighthouse", "WebPageTest"],
    "related_rules": ["react", "vuejs", "angular", "svelte", "nextjs", "nuxtjs", "gatsby", "solidjs", "qwik", "astro", "web-components"]
  }
]