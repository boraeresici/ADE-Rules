[
  {
    "id": "infrastructure-as-code",
    "name": "Infrastructure as Code (IaC)",
    "description": "All cloud infrastructure should be defined and managed as code using tools like Terraform, AWS CloudFormation, or Azure Resource Manager.",
    "documentation": "infrastructure-as-code.md",
    "tags": ["devops", "iac", "cloud", "automation"],
    "severity": "critical",
    "applies_to": ["devops", "cloud", "backend"],
    "automation_potential": ["ci-cd-check", "static-analysis", "code-review"],
    "suggested_tools": ["Terraform", "AWS CloudFormation", "Azure Resource Manager"],
    "related_rules": ["automate-deployments-ci-cd", "containerize-applications"]
  },
  {
    "id": "containerize-applications",
    "name": "Containerize Applications",
    "description": "All applications should be containerized using Docker, with images optimized for size and security.",
    "documentation": "containerize-applications.md",
    "tags": ["devops", "containers", "docker", "microservices"],
    "severity": "high",
    "applies_to": ["devops", "backend", "frontend"],
    "automation_potential": ["ci-cd-check", "static-analysis"],
    "suggested_tools": ["Docker", "Hadolint", "Trivy"],
    "related_rules": ["infrastructure-as-code", "automate-deployments-ci-cd"]
  },
  {
    "id": "automate-deployments-ci-cd",
    "name": "Automate Deployments with CI/CD",
    "description": "Implement a fully automated CI/CD pipeline for building, testing, and deploying applications, with organized, reusable, and secure workflows.",
    "documentation": "automate-deployments-ci-cd.md",
    "tags": ["devops", "ci-cd", "automation", "deployment"],
    "severity": "critical",
    "applies_to": ["devops", "all"],
    "automation_potential": ["ci-cd-check", "code-review"],
    "suggested_tools": ["GitHub Actions", "GitLab CI", "Jenkins", "Azure DevOps"],
    "related_rules": ["infrastructure-as-code", "containerize-applications"]
  },
  {
    ""id": "managed-serverless-services",
    "name": "Use Managed and Serverless Services",
    "description": "Prefer managed and serverless cloud services over self-hosting to reduce operational overhead and improve reliability.",
    "documentation": "managed-serverless-services.md",
    "tags": ["cloud", "serverless", "managed-services", "aws", "gcp", "azure"],
    "severity": "high",
    "applies_to": ["devops", "cloud", "backend", "frontend"],
    "automation_potential": ["iac", "ci-cd-check"],
    "suggested_tools": ["AWS Fargate", "Google Cloud Run", "AWS RDS", "Azure Cosmos DB"],
    "related_rules": ["infrastructure-as-code", "system-scalability"]
  },
  {
    "id": "comprehensive-monitoring-logging",
    "name": "Implement Comprehensive Monitoring and Logging",
    "description": "Integrate logging and monitoring tools to gain visibility into application performance and health, and create disaster recovery plans.",
    "documentation": "comprehensive-monitoring-logging.md",
    "tags": ["devops", "monitoring", "logging", "observability"],
    "severity": "critical",
    "applies_to": ["devops", "all"],
    "automation_potential": ["tool-integration", "ci-cd-check"],
    "suggested_tools": ["Prometheus", "Grafana", "ELK Stack", "Datadog"],
    "related_rules": ["observability-best-practices", "alerting-strategy"]
  },
  {
    "id": "container-security-best-practices",
    "name": "Container Security Best Practices",
    "description": "Guidelines for securing container images and runtime environments.",
    "documentation": "kubernetes/container-security-best-practices.md",
    "tags": ["kubernetes", "container", "security"],
    "severity": "critical",
    "applies_to": ["devops", "backend"],
    "automation_potential": ["sast", "dast", "ci-cd-check"],
    "suggested_tools": ["Trivy", "Clair", "Falco"],
    "related_rules": ["kubernetes-cluster-management-scaling"]
  },
  {
    "id": "kubernetes-cluster-management-scaling",
    "name": "Kubernetes Cluster Management and Scaling",
    "description": "Best practices for managing, operating, and scaling Kubernetes clusters.",
    "documentation": "kubernetes/kubernetes-cluster-management-scaling.md",
    "tags": ["kubernetes", "cluster", "scaling", "devops"],
    "severity": "high",
    "applies_to": ["devops", "backend"],
    "automation_potential": ["iac", "monitoring"],
    "suggested_tools": ["Kubernetes", "Prometheus", "Grafana"],
    "related_rules": ["container-security-best-practices", "istio-service-mesh-management"]
  },
  {
    "id": "istio-service-mesh-management",
    "name": "Istio Service Mesh Management",
    "description": "Guidelines for deploying and managing Istio for advanced traffic management, security, and observability.",
    "documentation": "kubernetes/istio-service-mesh-management.md",
    "tags": ["kubernetes", "istio", "service-mesh", "devops"],
    "severity": "high",
    "applies_to": ["devops", "backend"],
    "automation_potential": ["iac", "ci-cd-check"],
    "suggested_tools": ["Istio", "Kiali"],
    "related_rules": ["kubernetes-cluster-management-scaling"]
  },
  {
    "id": "helm-chart-development-usage",
    "name": "Helm Chart Development and Usage",
    "description": "Best practices for developing, packaging, and deploying applications using Helm charts.",
    "documentation": "kubernetes/helm-chart-development-usage.md",
    "tags": ["kubernetes", "helm", "deployment", "devops"],
    "severity": "medium",
    "applies_to": ["devops", "backend"],
    "automation_potential": ["ci-cd-check"],
    "suggested_tools": ["Helm"],
    "related_rules": ["kubernetes-cluster-management-scaling"]
  },
  {
    "id": "aws-lambda-function-optimization",
    "name": "AWS Lambda Function Optimization",
    "description": "Best practices for optimizing AWS Lambda functions for performance and cost efficiency.",
    "documentation": "serverless/aws-lambda-function-optimization.md",
    "tags": ["serverless", "aws", "lambda", "optimization"],
    "severity": "high",
    "applies_to": ["devops", "backend"],
    "automation_potential": ["monitoring", "code-review"],
    "suggested_tools": ["AWS Lambda Power Tuning", "CloudWatch"],
    "related_rules": ["serverless-framework-usage", "event-driven-architecture-principles"]
  },
  {
    "id": "azure-functions-best-practices",
    "name": "Azure Functions Best Practices",
    "description": "Guidelines for developing and deploying efficient and scalable Azure Functions.",
    "documentation": "serverless/azure-functions-best-practices.md",
    "tags": ["serverless", "azure", "functions", "best-practices"],
    "severity": "high",
    "applies_to": ["devops", "backend"],
    "automation_potential": ["monitoring", "code-review"],
    "suggested_tools": ["Azure Monitor", "Azure CLI"],
    "related_rules": ["serverless-framework-usage", "event-driven-architecture-principles"]
  },
  {
    "id": "serverless-framework-usage",
    "name": "Serverless Framework Usage Rules",
    "description": "Best practices for defining, deploying, and managing serverless applications using the Serverless Framework.",
    "documentation": "serverless/serverless-framework-usage.md",
    "tags": ["serverless", "framework", "deployment", "devops"],
    "severity": "medium",
    "applies_to": ["devops", "backend"],
    "automation_potential": ["ci-cd-check"],
    "suggested_tools": ["Serverless Framework"],
    "related_rules": ["aws-lambda-function-optimization", "azure-functions-best-practices"]
  },
  {
    "id": "event-driven-architecture-principles",
    "name": "Event-Driven Architecture Principles",
    "description": "Guidelines for designing and implementing robust and scalable event-driven architectures.",
    "documentation": "serverless/event-driven-architecture-principles.md",
    "tags": ["serverless", "architecture", "event-driven"],
    "severity": "high",
    "applies_to": ["backend", "architecture"],
    "automation_potential": ["code-review"],
    "suggested_tools": ["Kafka", "RabbitMQ", "AWS EventBridge"],
    "related_rules": ["serverless-framework-usage"]
  }
]